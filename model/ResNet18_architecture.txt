nn.Sequential {
  [input -> (1) -> (2) -> (3) -> output]
  (1): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> output]
    (1): cudnn.SpatialConvolution(3 -> 64, 7x7, 2,2, 3,3)
    (2): nn.SpatialBatchNormalization (4D) (64)
    (3): cudnn.ReLU
    (4): nn.SpatialMaxPooling(3x3, 2,2, 1,1)
    (5): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.Sequential {
        [input -> (1) -> (2) -> (3) -> output]
        (1): nn.ConcatTable {
          input
            |`-> (1): nn.Sequential {
            |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
            |      (1): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1)
            |      (2): nn.SpatialBatchNormalization (4D) (64)
            |      (3): cudnn.ReLU
            |      (4): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1)
            |      (5): nn.SpatialBatchNormalization (4D) (64)
            |    }
             `-> (2): nn.Identity
             ... -> output
        }
        (2): nn.CAddTable
        (3): cudnn.ReLU
      }
      (2): nn.Sequential {
        [input -> (1) -> (2) -> (3) -> output]
        (1): nn.ConcatTable {
          input
            |`-> (1): nn.Sequential {
            |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
            |      (1): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1)
            |      (2): nn.SpatialBatchNormalization (4D) (64)
            |      (3): cudnn.ReLU
            |      (4): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1)
            |      (5): nn.SpatialBatchNormalization (4D) (64)
            |    }
             `-> (2): nn.Identity
             ... -> output
        }
        (2): nn.CAddTable
        (3): cudnn.ReLU
      }
    }
    (6): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.Sequential {
        [input -> (1) -> (2) -> (3) -> output]
        (1): nn.ConcatTable {
          input
            |`-> (1): nn.Sequential {
            |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
            |      (1): cudnn.SpatialConvolution(64 -> 128, 3x3, 2,2, 1,1)
            |      (2): nn.SpatialBatchNormalization (4D) (128)
            |      (3): cudnn.ReLU
            |      (4): cudnn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1)
            |      (5): nn.SpatialBatchNormalization (4D) (128)
            |    }
             `-> (2): cudnn.SpatialConvolution(64 -> 128, 1x1, 2,2)
             ... -> output
        }
        (2): nn.CAddTable
        (3): cudnn.ReLU
      }
      (2): nn.Sequential {
        [input -> (1) -> (2) -> (3) -> output]
        (1): nn.ConcatTable {
          input
            |`-> (1): nn.Sequential {
            |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
            |      (1): cudnn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1)
            |      (2): nn.SpatialBatchNormalization (4D) (128)
            |      (3): cudnn.ReLU
            |      (4): cudnn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1)
            |      (5): nn.SpatialBatchNormalization (4D) (128)
            |    }
             `-> (2): nn.Identity
             ... -> output
        }
        (2): nn.CAddTable
        (3): cudnn.ReLU
      }
    }
    (7): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.Sequential {
        [input -> (1) -> (2) -> (3) -> output]
        (1): nn.ConcatTable {
          input
            |`-> (1): nn.Sequential {
            |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
            |      (1): cudnn.SpatialConvolution(128 -> 256, 3x3, 2,2, 1,1)
            |      (2): nn.SpatialBatchNormalization (4D) (256)
            |      (3): cudnn.ReLU
            |      (4): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1)
            |      (5): nn.SpatialBatchNormalization (4D) (256)
            |    }
             `-> (2): cudnn.SpatialConvolution(128 -> 256, 1x1, 2,2)
             ... -> output
        }
        (2): nn.CAddTable
        (3): cudnn.ReLU
      }
      (2): nn.Sequential {
        [input -> (1) -> (2) -> (3) -> output]
        (1): nn.ConcatTable {
          input
            |`-> (1): nn.Sequential {
            |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
            |      (1): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1)
            |      (2): nn.SpatialBatchNormalization (4D) (256)
            |      (3): cudnn.ReLU
            |      (4): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1)
            |      (5): nn.SpatialBatchNormalization (4D) (256)
            |    }
             `-> (2): nn.Identity
             ... -> output
        }
        (2): nn.CAddTable
        (3): cudnn.ReLU
      }
    }
    (8): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.Sequential {
        [input -> (1) -> (2) -> (3) -> output]
        (1): nn.ConcatTable {
          input
            |`-> (1): nn.Sequential {
            |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
            |      (1): cudnn.SpatialConvolution(256 -> 512, 3x3, 2,2, 1,1)
            |      (2): nn.SpatialBatchNormalization (4D) (512)
            |      (3): cudnn.ReLU
            |      (4): cudnn.SpatialConvolution(512 -> 512, 3x3, 1,1, 1,1)
            |      (5): nn.SpatialBatchNormalization (4D) (512)
            |    }
             `-> (2): cudnn.SpatialConvolution(256 -> 512, 1x1, 2,2)
             ... -> output
        }
        (2): nn.CAddTable
        (3): cudnn.ReLU
      }
      (2): nn.Sequential {
        [input -> (1) -> (2) -> (3) -> output]
        (1): nn.ConcatTable {
          input
            |`-> (1): nn.Sequential {
            |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
            |      (1): cudnn.SpatialConvolution(512 -> 512, 3x3, 1,1, 1,1)
            |      (2): nn.SpatialBatchNormalization (4D) (512)
            |      (3): cudnn.ReLU
            |      (4): cudnn.SpatialConvolution(512 -> 512, 3x3, 1,1, 1,1)
            |      (5): nn.SpatialBatchNormalization (4D) (512)
            |    }
             `-> (2): nn.Identity
             ... -> output
        }
        (2): nn.CAddTable
        (3): cudnn.ReLU
      }
    }
  }
  (2): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialFullConvolution(512 -> 256, 1x1, 2,2, 1,1) without bias
          |      (2): nn.SpatialBatchNormalization (4D) (256)
          |      (3): nn.RReLU (l:0.125000, u:0.333333)
          |      (4): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1) without bias
          |      (5): nn.SpatialBatchNormalization (4D) (256)
          |    }
           `-> (2): nn.Sequential {
                 [input -> (1) -> (2) -> output]
                 (1): cudnn.SpatialFullConvolution(512 -> 256, 1x1, 2,2, 1,1) without bias
                 (2): nn.SpatialBatchNormalization (4D) (256)
               }
           ... -> output
      }
      (2): nn.CAddTable
      (3): nn.RReLU (l:0.125000, u:0.333333)
    }
    (2): nn.SpatialDropout(0.200000)
    (3): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialFullConvolution(256 -> 256, 1x1) without bias
          |      (2): nn.SpatialBatchNormalization (4D) (256)
          |      (3): nn.RReLU (l:0.125000, u:0.333333)
          |      (4): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1) without bias
          |      (5): nn.SpatialBatchNormalization (4D) (256)
          |    }
           `-> (2): nn.Sequential {
                 [input -> (1) -> (2) -> output]
                 (1): cudnn.SpatialFullConvolution(256 -> 256, 1x1) without bias
                 (2): nn.SpatialBatchNormalization (4D) (256)
               }
           ... -> output
      }
      (2): nn.CAddTable
      (3): nn.RReLU (l:0.125000, u:0.333333)
    }
    (4): nn.SpatialDropout(0.200000)
    (5): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialFullConvolution(256 -> 128, 1x1, 2,2, 1,1) without bias
          |      (2): nn.SpatialBatchNormalization (4D) (128)
          |      (3): nn.RReLU (l:0.125000, u:0.333333)
          |      (4): cudnn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1) without bias
          |      (5): nn.SpatialBatchNormalization (4D) (128)
          |    }
           `-> (2): nn.Sequential {
                 [input -> (1) -> (2) -> output]
                 (1): cudnn.SpatialFullConvolution(256 -> 128, 1x1, 2,2, 1,1) without bias
                 (2): nn.SpatialBatchNormalization (4D) (128)
               }
           ... -> output
      }
      (2): nn.CAddTable
      (3): nn.RReLU (l:0.125000, u:0.333333)
    }
    (6): nn.SpatialDropout(0.200000)
    (7): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialFullConvolution(128 -> 128, 1x1) without bias
          |      (2): nn.SpatialBatchNormalization (4D) (128)
          |      (3): nn.RReLU (l:0.125000, u:0.333333)
          |      (4): cudnn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1) without bias
          |      (5): nn.SpatialBatchNormalization (4D) (128)
          |    }
           `-> (2): nn.Sequential {
                 [input -> (1) -> (2) -> output]
                 (1): cudnn.SpatialFullConvolution(128 -> 128, 1x1) without bias
                 (2): nn.SpatialBatchNormalization (4D) (128)
               }
           ... -> output
      }
      (2): nn.CAddTable
      (3): nn.RReLU (l:0.125000, u:0.333333)
    }
    (8): nn.SpatialDropout(0.200000)
    (9): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialFullConvolution(128 -> 64, 1x1, 2,2, 1,1) without bias
          |      (2): nn.SpatialBatchNormalization (4D) (64)
          |      (3): nn.RReLU (l:0.125000, u:0.333333)
          |      (4): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (5): nn.SpatialBatchNormalization (4D) (64)
          |    }
           `-> (2): nn.Sequential {
                 [input -> (1) -> (2) -> output]
                 (1): cudnn.SpatialFullConvolution(128 -> 64, 1x1, 2,2, 1,1) without bias
                 (2): nn.SpatialBatchNormalization (4D) (64)
               }
           ... -> output
      }
      (2): nn.CAddTable
      (3): nn.RReLU (l:0.125000, u:0.333333)
    }
    (10): nn.SpatialDropout(0.200000)
    (11): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialFullConvolution(64 -> 64, 1x1) without bias
          |      (2): nn.SpatialBatchNormalization (4D) (64)
          |      (3): nn.RReLU (l:0.125000, u:0.333333)
          |      (4): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (5): nn.SpatialBatchNormalization (4D) (64)
          |    }
           `-> (2): nn.Sequential {
                 [input -> (1) -> (2) -> output]
                 (1): cudnn.SpatialFullConvolution(64 -> 64, 1x1) without bias
                 (2): nn.SpatialBatchNormalization (4D) (64)
               }
           ... -> output
      }
      (2): nn.CAddTable
      (3): nn.RReLU (l:0.125000, u:0.333333)
    }
    (12): nn.SpatialDropout(0.200000)
    (13): cudnn.SpatialFullConvolution(64 -> 64, 1x1, 2,2, 1,1) without bias
    (14): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
    (15): nn.SpatialBatchNormalization (4D) (64)
    (16): nn.RReLU (l:0.125000, u:0.333333)
    (17): nn.SpatialDropout(0.200000)
    (18): cudnn.SpatialFullConvolution(64 -> 64, 1x1, 2,2, 1,1) without bias
    (19): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
    (20): nn.SpatialBatchNormalization (4D) (64)
    (21): nn.RReLU (l:0.125000, u:0.333333)
    (22): nn.SpatialDropout(0.200000)
  }
  (3): cudnn.SpatialConvolution(64 -> 12, 3x3, 1,1, 1,1)
}